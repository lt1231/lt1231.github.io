<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ting Blog</title>
  
  <subtitle>welcome to Ting blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lt1231.github.io/"/>
  <updated>2018-04-02T02:45:28.103Z</updated>
  <id>https://lt1231.github.io/</id>
  
  <author>
    <name>Tingli</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git操作命令总结</title>
    <link href="https://lt1231.github.io/2018/04/02/git%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>https://lt1231.github.io/2018/04/02/git操作命令总结/</id>
    <published>2018-04-02T02:18:22.412Z</published>
    <updated>2018-04-02T02:45:28.103Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2018/3/23/16251a633280d5e8?imageView2/1/w/1304/h/734/q/85/interlace/1" alt="这里写图片描述"><br>HEAD：当前commit引用</p><p>$ git version   # → git版本</p><p>$ git branch   # → 查看本地所有的分支</p><p>$ git branch   # → 查看本地所有的分支<br><a id="more"></a><br>$ git branch -r # → 查看所有远程的分支</p><p>$ git branch -a # → 查看所有远程分支和本地分支</p><p>$ git branch -d <branchname> # → 删除本地branchname分支</branchname></p><p>$ git branch -m brancholdname branchnewname # → 重命名分支</p><p>$ git branch <branchname> # → 创建branchname分支</branchname></p><p>$ git checkout <branchname> # → 切换分支到branchname</branchname></p><p>$ git checkout -b <branchname> # → 等同于执行上两步，即创建新的分支并切换到该分支</branchname></p><p>$ git checkout – xx/xx # → 回滚单个文件</p><p>$ git pull origin master:master # → 将远程origin主机的master分支合并到当前master分支,冒号后面的部分表示当前本地所在的分支</p><p>$ git push origin -d <branchname>   # → 删除远程branchname分支</branchname></p><p>$ git fetch –p # → 更新分支</p><p>$ git status # → 查看仓库状态</p><p>$ git add xx # → 把xx文件添加到暂存区去</p><p>$ git commit -m ‘ ‘  # → 提交文件 -m 后面的是注释(不建议使用?)</p><p>$ git commit -am(-a -m) # → 提交所有的修改，等同于上两步(不建议使用?)</p><p>$ git commit ./xx   # → 等同于git add ./xx + git commit（建议使用?）</p><p>$ git commit –amend # → 将暂存区和当前commit合并创建一个新commit去替换当前commit</p><p>$ git stash # → 把当前的工作隐藏起来 等以后恢复现场后继续工作</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a813d38a3a?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>$ git stash pop # → 恢复工作现场（恢复隐藏的文件，同时删除stash列表中对应的内容）</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a81c9e0bd1?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>$ git fetch –all  # → 将远程主机的更新全部取回本地</p><p>$ git merge origin/master  # → 在本地（当前）分支上合并远程分支</p><p>$ git merge –abort  # → 终止本次merge，并回到merge前的状态（?）</p><p>$ git pull origin master  # → 从远程获取最新版本并merge到本地等同于</p><p>$ git fetch origin master + $ git merge origin/master（前者更安全一些）</p><p>$ git push origin master   # → 将本地master分支推送到远程origin主机的master分支</p><p>$ git log xx  # → 查看xx文件的commit记录</p><p>$ git log -p xx   # → 查看xx文件每次提交的diff</p><p>$ git log –pretty=oneline xx  # → 查看xx文件提交的历史记录（只显示哈希值和提交说明）</p><p>$ git log –pretty=raw  # → 查看commit之间的父子关系（root commit是没有父提交的）</p><p>$ git log –graph  # → 查看当前分支commit生成的树状图</p><p>$ git diff HEAD HEAD^1 – xx  # → 查看xx文件不同版本之间的差异</p><p>$ git diff HEAD~1  # → 显示父节点的提交</p><p><strong> git中‘~’和‘^’的区别：</strong></p><p>(<commit>|HEAD)^n，指的是HEAD的第n个父提交，可以通过在“^”后面跟上一个数字，表示第几个父提交，“^”相当“^1”。例如：HEAD^2 表示HEAD的第二次父提交。(<commit>|HEAD)~n，指的是HEAD的第n个祖先提交，可以通过在“~”后面跟上一个数字，表示第几个祖父提交，“~”相当“~1”，“~n”相当于连续的<n>个“^”。例如：HEAD~2 表示HEAD的第一个父提交的第一个父提交。</n></commit></commit></p><p>等式1：HEAD~ === HEAD^ === HEAD^1 </p><p>等式2：HEAD~2 === HEAD^^ === HEAD^1^1</p><p>$ git diff –staged/–cached  # → 显示暂存区和上一次提交的不同，git add之前忘diff的后悔药</p><p>$ git show –stat  # → 查看最后一次的修改</p><p>$ git show HEAD  # → 查看指定版本的修改（可省略HEAD，默认当前版本） 同上</p><p>$ git show HEAD xxx  # → 查看指定版本xx文件的修改（可省略HEAD，默认当前版本）</p><p>$ git reset –hard HEAD  # → 回滚到指定版本，同时清空工作目录的所有改动</p><p>$ git reset –soft HEAD  # → 回滚到指定版本，同时保留工作目录和暂存区的内容，并把重置的位置所导致的新的文件差异放进暂存区</p><p>$ git reset –mixed HEAD  # → （默认）回滚到指定版本，同时保留工作目录的内容，并清空暂存区</p><p>$ git reset –hard origin/master  # → 将本地master与远程master同步</p><p> –hard –soft –mixed的区别可用下图表示：<br> 假设当前commit和工作目录如下所示：<img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a817765b40?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"><br>如果这时你执行：git reset –hard HEAD^<br><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a85877b2ab?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"><br>改动全部消失，未跟踪文件除外⬆️<br><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a857be9277?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>git show –stat查看此时对应的当前commit⬆️<br>2⃣️如果这时你执行：git reset –soft HEAD^<br><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a857c98476?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"><br>reset之前commit的改动被放进暂存区，并保留了工作目录⬆️</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a857be9277?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"><br>git show –stat查看此时对应的当前commit⬆️<br>如果这时你执行：git reset –mixed HEAD^<br><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a8902e6daf?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"><br>同–soft一样保留了工作目录，但暂存区被全部被清空，之前commit的改动被放到未追踪文件中⬆️<br><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a857be9277?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>git show –stat查看此时对应的当前commit⬆️<br>$ git reflog show –date=iso <branch name="">  # → 查看分支的创建时间</branch></p><p>$ git branch -r | awk ‘{print $1}’ | egrep -v -f /dev/fd/0 &lt;(git branch -vv | grep origin) | awk ‘{print $1}’ | xargs git branch -d  # → 删除在远程已被删除的本地分支 (慎用)</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a88cf56929?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>$ git remote show origin  # → 查看remote地址，远程分支，还有本地分支与之相对应关系等信息。</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a85e7c325c?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>$ git remote prune origin  # → 删除了那些远程仓库不存在的分支 === git fetch -p</p><p>$ git config  # → 查看和编辑git的配置<br>查看格式：<br>git config [–local|–global|–system] -l</p><p>$ git config –local -l  # →  查看仓库级的config</p><p>$ git config –global -l  # →  查看全局级的config</p><p>编辑格式：<br>git config [–local|–global|–system] -e</p><p>$ git config –local -e # →  编辑仓库级的config</p><p>$ git config –global -e # →  编辑全局级的config</p><p>修改格式：<br>git config [–local|–global|–system] section.key value</p><p>$ git config –local push.default ‘simple’  # →  修改仓库级的push.default的默认行为</p><p>$ git config –global push.default ‘current’  # →  修改全局级的push.default的默认行为</p><ul><li>关于git default配置这里</li></ul><p>增加格式:<br>git config [–local|–global|–system] –add section.key value(默认是添加在local配置中)</p><p>$ git config –add cat.name songhw  # →  local配置写入 cat.name = songhw</p><p>$ git config –local –add cat.name songhw  # →  等同于上一步</p><p>$ git config –global –add cat.name lhammer  # →  global配置写入 cat.name = lhammer</p><p>获取格式：<br>git config [–local|–global|–system] –get section.key(默认是获取local配置中内容)</p><p>$ git config –get cat.name  # →  输出songhw</p><p>$ git config –local –get cat.name  # →  输出结果同上一步</p><p>$ git config –global –get cat.name  # →  输出lhammer</p><p>删除格式：<br>git config [–local|–global|–system] –unset section.key</p><p>$ git config –local –unset cat.name # →  删除local配置中的cat.name = songhw</p><p>$ git config –global –unset cat.name # →  删除local配置中的cat.name = lhammer</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a88d1d646a?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>$ git rebase master  # → 在当前分支对master执行rebase</p><p>$ git rebase -i 目标commit  # → 修改历史某一次提交</p><p>把需要修改的commit对应的操作指令从pick改为edit</p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a892c95e65?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a8a896cb2a?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>$ gitrebase –continue  # → 接上一步修改完之后，继续rebase</p><p>$ gitrebase –onto HEAD HEAD^1 <branchname>   # → 撤销指定的commit，即消失在历史中</branchname></p><p><img src="https://user-gold-cdn.xitu.io/2017/12/10/1603f4a8bad0fa3e?imageView2/0/w/1280/h/960/ignore-error/1" alt="这里写图片描述"></p><p>$ git push origin <brancename> -f  # → 忽略冲突，强制提交</brancename></p><p>$ git revert HEAD  # → 撤销指定的commit（?）</p><p> git revert和git rebase –onto的区别： git revert会增加一条新的commit，它的内容与指定commit的修改是相反的，两次相互抵消从而达到撤销的效果，并且在commit历史中，会存在两条提交，一条原始commit，一条它的反转commit，而git rebase –onto是直接将commit从历史记录中直接删除。</p><p>$ git checkout  HEAD(c08de9a)  # → c08de9a为brance删除之前所在的位置</p><p>$ git checkout -b <brancename>  # → 重新创建<brancename>，找回删除的分支</brancename></brancename></p><p>注：不再被引用直接或间接指向的commit会在一定的时间被git回收，所以通过reflog操作找回删除的分支一定要及时，不然有可能由于commit被回收导致永远也找不回了<br>$ git tag  # → 列出所有<code>tag</code></p><p>$ git tag -l version1.*  # → 只会列出1.几的版本</p><p>$ git tag <tagname>(version 1.0)  # → 创建轻量级的<code>tag</code></tagname></p><p>$ git tag -a <tagname>(version1.0) -m ‘first version’  # → 创建带有信息的<code>tag</code></tagname></p><p>$ git tag -d <tagname>(version 1.0)  # → 删除指定<code>tag</code></tagname></p><p>$ git checkout <tagname>(version 1.0)  # → 检出指定<code>tag</code></tagname></p><p>作者：LHammer<br>链接：<a href="https://juejin.im/post/5a2cdfe26fb9a0452936b07f" target="_blank" rel="noopener">https://juejin.im/post/5a2cdfe26fb9a0452936b07f</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2018/3/23/16251a633280d5e8?imageView2/1/w/1304/h/734/q/85/interlace/1&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;HEAD：当前commit引用&lt;/p&gt;
&lt;p&gt;$ git version   # → git版本&lt;/p&gt;
&lt;p&gt;$ git branch   # → 查看本地所有的分支&lt;/p&gt;
&lt;p&gt;$ git branch   # → 查看本地所有的分支&lt;br&gt;
    
    </summary>
    
      <category term="-github" scheme="https://lt1231.github.io/categories/github/"/>
    
    
      <category term="-前端" scheme="https://lt1231.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何处理嵌套的表格边框</title>
    <link href="https://lt1231.github.io/2018/03/09/%E8%A1%A8%E6%A0%BC%E5%B5%8C%E5%A5%97%E8%BE%B9%E6%A1%86%E5%A4%84%E7%90%86/"/>
    <id>https://lt1231.github.io/2018/03/09/表格嵌套边框处理/</id>
    <published>2018-03-09T05:35:42.598Z</published>
    <updated>2018-04-02T03:16:27.340Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://ojoba1c98.bkt.clouddn.com/img/build-hexo/next.png" alt="这里写图片描述"><br><code>外层table与内层table嵌套，内外表格都需边框时，设置“border=1”，但边框会重复，造成某些地方边框粗，有些地方边框细的问题。</code><br><a id="more"></a><br>解决办法：<br>外表格样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; style=&quot;border-collapse: collapse;”&gt;</span><br></pre></td></tr></table></figure></p><p>内表格样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;table border=&quot;1&quot; cellspacing=&quot;0&quot; cellpadding=&quot;0&quot; style=&quot;border-collapse: collapse;border-width:0px; border-style:hidden;&quot;&gt;</span><br></pre></td></tr></table></figure></p><p><code>按照如上设置：嵌套表格看起来就像一个表格一样，非常漂亮！</code><br><a href="https://www.cnblogs.com/sunflower627/p/3548368.html" target="_blank" rel="noopener">原文地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ojoba1c98.bkt.clouddn.com/img/build-hexo/next.png&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;br&gt;&lt;code&gt;外层table与内层table嵌套，内外表格都需边框时，设置“border=1”，但边框会重复，造成某些地方边框粗，有些地方边框细的问题。&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="-css样式" scheme="https://lt1231.github.io/categories/css%E6%A0%B7%E5%BC%8F/"/>
    
    
      <category term="-web前端" scheme="https://lt1231.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>正则验证手机号，邮箱</title>
    <link href="https://lt1231.github.io/2018/03/09/%E6%AD%A3%E5%88%99%E9%AA%8C%E8%AF%81%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%92%8C%E9%82%AE%E7%AE%B1/"/>
    <id>https://lt1231.github.io/2018/03/09/正则验证手机号和邮箱/</id>
    <published>2018-03-09T05:35:42.596Z</published>
    <updated>2018-02-06T05:15:21.679Z</updated>
    
    <content type="html"><![CDATA[<p>手机号验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">^1[3|4|5|7|8][0-9]&#123;9&#125;$</span><br></pre></td></tr></table></figure></p><blockquote><p>这是精准的手机号验证格式<br>解释 ：开头数字是1，第二位数字，是3到8的任何一个数字，后面是0到9的任意数字，一共9个字符</p></blockquote><p>邮箱验证<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[a-z0-9!#$%&amp;&apos;*+\/=?^_`&#123;|&#125;~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$/i</span><br></pre></td></tr></table></figure></p><p>验证手机号或者邮箱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/（^0&#123;0,1&#125;(13[0-9]|15[7-9]|153|156|18[7-9])[0-9]&#123;8&#125;$）|（^[a-z0-9!#$%&amp;&apos;*+\/=?^_`&#123;|&#125;~.-]+@[a-z0-9]([a-z0-9-]*[a-z0-9])?(\.[a-z0-9]([a-z0-9-]*[a-z0-9])?)*$）/i</span><br></pre></td></tr></table></figure><p>正则表达式的两种定义方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var reg = /^0&#123;0,1&#125;(13[0-9]|15[7-9]|153|156|18[7-9])[0-9]&#123;8&#125;$/;</span><br><span class="line">var reg = new RegExp(&apos;^0&#123;0,1&#125;(13[0-9]|15[7-9]|153|156|18[7-9])[0-9]&#123;8&#125;$&apos;);</span><br><span class="line">reg.test(&apos;123@qq.com&apos;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;手机号验证&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;p
      
    
    </summary>
    
      <category term="-javascipt" scheme="https://lt1231.github.io/categories/javascipt/"/>
    
    
      <category term="-web前端" scheme="https://lt1231.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>下载控件（点击链接下载文件）</title>
    <link href="https://lt1231.github.io/2018/03/09/%E4%B8%8B%E8%BD%BD%E6%8E%A7%E4%BB%B6/"/>
    <id>https://lt1231.github.io/2018/03/09/下载控件/</id>
    <published>2018-03-09T05:35:42.595Z</published>
    <updated>2018-01-26T01:26:07.576Z</updated>
    
    <content type="html"><![CDATA[<p>html部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;download.php?file=这里写你需要下载的文件地址&quot;&gt;UCdownload&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>php部分<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">$file = $_GET[&apos;file&apos;];</span><br><span class="line">header (&quot;Content-type: octet/stream&quot;);  //字节流，下载使用</span><br><span class="line">header (&quot;Content-disposition: attachment; filename=&quot;.$file.&quot;;&quot;); //下载的形式，这里是作为附件下载</span><br><span class="line">header(&quot;Content-Length: &quot;.filesize($file));  </span><br><span class="line">readfile($file);  </span><br><span class="line">exit;    </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;html部分&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="-web 前端" scheme="https://lt1231.github.io/categories/web-%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="-web前端" scheme="https://lt1231.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>json和js的互转</title>
    <link href="https://lt1231.github.io/2018/03/09/json%E5%92%8Cjs%E7%9A%84%E4%BA%92%E8%BD%AC/"/>
    <id>https://lt1231.github.io/2018/03/09/json和js的互转/</id>
    <published>2018-03-09T05:35:42.594Z</published>
    <updated>2018-02-02T05:38:45.786Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JS对象转json</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var data = new Object();</span><br><span class="line">var json_data = JSON.stringify(data);</span><br></pre></td></tr></table></figure><blockquote><p>（可用来成转换js数组）</p></blockquote><p><strong>json转JS</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var json_data = $.getJSON();</span><br><span class="line">var data = $.parseJSON(json_data);</span><br></pre></td></tr></table></figure><p><strong>.将json转换成js对象的方法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var json = eval(&apos;(&apos; + result + &apos;)&apos;);</span><br></pre></td></tr></table></figure><blockquote><p>通过上面这个表达式，就完成了将服务器端响应给客户端的Json格式的字符串解析成了一个Json（格式的）对象，名称为“json”，通过“json.”或者“json[]”的方式便可进行数据访问。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;JS对象转json&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cl
      
    
    </summary>
    
      <category term="-javascript" scheme="https://lt1231.github.io/categories/javascript/"/>
    
    
      <category term="-web前端" scheme="https://lt1231.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>http状态码大全</title>
    <link href="https://lt1231.github.io/2018/03/09/http%E7%8A%B6%E6%80%81%E7%A0%81%E5%A4%A7%E5%85%A8/"/>
    <id>https://lt1231.github.io/2018/03/09/http状态码大全/</id>
    <published>2018-03-09T05:35:42.593Z</published>
    <updated>2018-04-02T02:42:12.697Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/2964446-5a35e17f298a48e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="这里写图片描述"></p><p>XMLHttpRequest.status:</p><p>1xx-信息提示<br>这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个1xx响应。<br>100-继续。<br>101-切换协议。<br><a id="more"></a><br>2xx-成功<br>这类状态代码表明服务器成功地接受了客户端请求。<br>200-确定。客户端请求已成功。<br>201-已创建。<br>202-已接受。<br>203-非权威性信息。<br>204-无内容。<br>205-重置内容。<br>206-部分内容。  </p><p>3xx-重定向<br>客户端浏览器必须采取更多操作来实现请求。例如，浏览器可能不得不请求服务器上的不同的页面，或通过代理服务器重复该请求。<br>301-对象已永久移走，即永久重定向。<br>302-对象已临时移动。<br>304-未修改。<br>307-临时重定向。<br>4xx-客户端错误<br>发生错误，客户端似乎有问题。例如，客户端请求不存在的页面，客户端未提供有效的身份验证信息。400-错误的请求。<br>401-访问被拒绝。IIS定义了许多不同的401错误，它们指明更为具体的错误原因。这些具体的错误代码在浏览器中显示，但不在IIS日志中显示：<br>401.1-登录失败。<br>401.2-服务器配置导致登录失败。<br>401.3-由于ACL对资源的限制而未获得授权。<br>401.4-筛选器授权失败。<br>401.5-ISAPI/CGI应用程序授权失败。<br>401.7–访问被Web服务器上的URL授权策略拒绝。这个错误代码为IIS6.0所专用。<br>403-禁止访问：IIS定义了许多不同的403错误，它们指明更为具体的错误原因：<br>403.1-执行访问被禁止。<br>403.2-读访问被禁止。<br>403.3-写访问被禁止。<br>403.4-要求SSL。<br>403.5-要求SSL128。<br>403.6-IP地址被拒绝。<br>403.7-要求客户端证书。<br>403.8-站点访问被拒绝。<br>403.9-用户数过多。<br>403.10-配置无效。<br>403.11-密码更改。<br>403.12-拒绝访问映射表。<br>403.13-客户端证书被吊销。<br>403.14-拒绝目录列表。<br>403.15-超出客户端访问许可。<br>403.16-客户端证书不受信任或无效。<br>403.17-客户端证书已过期或尚未生效。<br>403.18-在当前的应用程序池中不能执行所请求的URL。这个错误代码为IIS6.0所专用。<br>403.19-不能为这个应用程序池中的客户端执行CGI。这个错误代码为IIS6.0所专用。<br>403.20-Passport登录失败。这个错误代码为IIS6.0所专用。<br>404-未找到。<br>404.0-（无）–没有找到文件或目录。<br>404.1-无法在所请求的端口上访问Web站点。<br>404.2-Web服务扩展锁定策略阻止本请求。<br>404.3-MIME映射策略阻止本请求。<br>405-用来访问本页面的HTTP谓词不被允许（方法不被允许）<br>406-客户端浏览器不接受所请求页面的MIME类型。<br>407-要求进行代理身份验证。<br>412-前提条件失败。<br>413–请求实体太大。<br>414-请求URI太长。<br>415–不支持的媒体类型。<br>416–所请求的范围无法满足。<br>417–执行失败。<br>423–锁定的错误。<br>5xx-服务器错误<br>服务器由于遇到错误而不能完成该请求。<br>500-内部服务器错误。<br>500.12-应用程序正忙于在Web服务器上重新启动。<br>500.13-Web服务器太忙。<br>500.15-不允许直接请求Global.asa。<br>500.16–UNC授权凭据不正确。这个错误代码为IIS6.0所专用。<br>500.18–URL授权存储不能打开。这个错误代码为IIS6.0所专用。<br>500.100-内部ASP错误。<br>501-页眉值指定了未实现的配置。<br>502-Web服务器用作网关或代理服务器时收到了无效响应。<br>502.1-CGI应用程序超时。<br>502.2-CGI应用程序出错。application.<br>503-服务不可用。这个错误代码为IIS6.0所专用。<br>504-网关超时。<br>505-HTTP版本不受支持。<br>FTP<br>1xx-肯定的初步答复<br>这些状态代码指示一项操作已经成功开始，但客户端希望在继续操作新命令前得到另一个答复。<br>110重新启动标记答复。<br>120服务已就绪，在nnn分钟后开始。<br>125数据连接已打开，正在开始传输。<br>150文件状态正常，准备打开数据连接。<br>2xx-肯定的完成答复<br>一项操作已经成功完成。客户端可以执行新命令。200命令确定。<br>202未执行命令，站点上的命令过多。<br>211系统状态，或系统帮助答复。<br>212目录状态。<br>213文件状态。<br>214帮助消息。<br>215NAME系统类型，其中，NAME是AssignedNumbers文档中所列的正式系统名称。<br>220服务就绪，可以执行新用户的请求。<br>221服务关闭控制连接。如果适当，请注销。<br>225数据连接打开，没有进行中的传输。<br>226关闭数据连接。请求的文件操作已成功（例如，传输文件或放弃文件）。<br>227进入被动模式(h1,h2,h3,h4,p1,p2)。<br>230用户已登录，继续进行。<br>250请求的文件操作正确，已完成。<br>257已创建“PATHNAME”。<br>3xx-肯定的中间答复<br>该命令已成功，但服务器需要更多来自客户端的信息以完成对请求的处理。331用户名正确，需要密码。<br>332需要登录帐户。<br>350请求的文件操作正在等待进一步的信息。<br>4xx-瞬态否定的完成答复<br>该命令不成功，但错误是暂时的。如果客户端重试命令，可能会执行成功。421服务不可用，正在关闭控制连接。如果服务确定它必须关闭，将向任何命令发送这一应答。<br>425无法打开数据连接。<br>426Connectionclosed;transferaborted.<br>450未执行请求的文件操作。文件不可用（例如，文件繁忙）。<br>451请求的操作异常终止：正在处理本地错误。<br>452未执行请求的操作。系统存储空间不够。<br>5xx-永久性否定的完成答复<br>该命令不成功，错误是永久性的。如果客户端重试命令，将再次出现同样的错误。500语法错误，命令无法识别。这可能包括诸如命令行太长之类的错误。<br>501在参数中有语法错误。<br>502未执行命令。<br>503错误的命令序列。<br>504未执行该参数的命令。<br>530未登录。<br>532存储文件需要帐户。<br>550未执行请求的操作。文件不可用（例如，未找到文件，没有访问权限）。<br>551请求的操作异常终止：未知的页面类型。<br>552请求的文件操作异常终止：超出存储分配（对于当前目录或数据集）。<br>553未执行请求的操作。不允许的文件名。<br>常见的FTP状态代码及其原因<br>150-FTP使用两个端口：21用于发送命令，20用于发送数据。状态代码150表示服务器准备在端口20上打开新连接，发送一些数据。<br>226-命令在端口20上打开数据连接以执行操作，如传输文件。该操作成功完成，数据连接已关闭。<br>230-客户端发送正确的密码后，显示该状态代码。它表示用户已成功登录。<br>331-客户端发送用户名后，显示该状态代码。无论所提供的用户名是否为系统中的有效帐户，都将显示该状态代码。<br>426-命令打开数据连接以执行操作，但该操作已被取消，数据连接已关闭。<br>530-该状态代码表示用户无法登录，因为用户名和密码组合无效。如果使用某个用户帐户登录，可能键入错误的用户名或密码，也可能选择只允许匿名访问。如果使用匿名帐户登录，IIS的配置可能拒绝匿名访问。<br>550-命令未被执行，因为指定的文件不可用。例如，要GET的文件并不存在，或试图将文件PUT到您没有写入权限的目录</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/2964446-5a35e17f298a48e1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;p&gt;XMLHttpRequest.status:&lt;/p&gt;
&lt;p&gt;1xx-信息提示&lt;br&gt;这些状态代码表示临时的响应。客户端在收到常规响应之前，应准备接收一个或多个1xx响应。&lt;br&gt;100-继续。&lt;br&gt;101-切换协议。&lt;br&gt;
    
    </summary>
    
      <category term="-http协议" scheme="https://lt1231.github.io/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="-服务器知识点" scheme="https://lt1231.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://lt1231.github.io/2018/03/09/hell/"/>
    <id>https://lt1231.github.io/2018/03/09/hell/</id>
    <published>2018-03-09T05:35:42.591Z</published>
    <updated>2018-02-02T05:47:25.944Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img.zcool.cn/community/01db935a53303ba8012180c57ff4e8.jpeg@260w_195h_1c_1e_1o_100sh.jpg" alt="这里写图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是我的第一篇博客日记，不知道写些啥比较好，随便写写，算是有了个开头，留下些痕迹。。。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://img.zcool.cn/community/01db935a53303ba8012180c57ff4e8.jpeg@260w_195h_1c_1e_1o_100sh.jpg&quot; alt=&quot;这里写图片描述&quot;&gt;&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="-生活笔记" scheme="https://lt1231.github.io/categories/%E7%94%9F%E6%B4%BB%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="-life" scheme="https://lt1231.github.io/tags/life/"/>
    
  </entry>
  
</feed>
